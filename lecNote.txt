laravel ==> php framework
framework==> group of files ,backages => code esay => resuable
===
reason in create laravel 
php ==> dynamci
1-
php ==>connection with DB ===> create more than object

user ==> register , login , show all orders , create product==> create object from DB
=====> 
laravel ==> Design pattern ==> Single Tone
Design pattern ==> logic we use to solve problem
sigle tone ==> create single object from DB
object ==> DB   ==> []====>

2- 
User , Developer ==> deal direct with DB ==> edit in any table==> may cause problem in code  , Code not organized
all pages in code edit 

laravel ==> Design pattern ==> MVC ===> Model View Controller 
Model ==> Deal with DB 
View ==> code html , design ==> user can see
Controller => Logic
Code ease in read , edit , Organized


================================
request write in browser ==> route ===> URL ===> in ==> done
===========================================> Error 404 Not Found


Browser ==> URL (allOrders)===> [Route(web, api)]

laravel ==> PHP framework , FullStack framework
laravel ==> BackEnd ==> generate API ==> Front

Front ==> flutter ===> api ==> routes ==> use DB ===>api 
               Front ===>api ==> DB  (================)
======================================================
laravel ==> Front , BackEnd => generate FullStack webSite

user ==> request ==> Route (web) --> already exist ==> 
1- callBack Function ==> text , web ===>(view ==> user )
2- DB ==> Model   ==> View , Code 
3- Controller ===> Function ==> check function already exist 
already exist ==> DB===> Return DB ==> 
already exist ==> DB===> Return DB ==>  View Data ==> View 
sent User ==> response 



==============================
Deal with laravel 
php ==>  (https://www.php.net/)
version ==>8.2.1
PHP Backages Manager ==> Composer (https://getcomposer.org/download/)
Composer ===> is a tool for dependency management in PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.



=============================
install laravel  project
1- composer create-project laravel/laravel:^11.0 projectName

2- (olny first time )composer global require laravel/installer

any project ==> laravel new projectName

===========================================
run command ==> project laravel ==> tool (artisan)


to run laravel project 
1- cd projectName
2- php artisan serve


====================
stop server ctrl+c
=============================
pageName.php ==> pageName.blade.php

blade ==> write code  php with out ==> write tag php
deal with directives ==> same funtions in php ==> @
var_dump ==> @dump  ==> execute code with out stop
dump and die (@dd) ==> @dump + $exist==> show data , stop code
if ==> @if 


=========================================
day 3 laravel

===> security ===> access ==> change on data ===> access on data
====> token ===> csrf ===> @csrf====> 419 page expired



============> create ===========> form ==> all inputs ==> all data to insert
================================> action of forem ==> take all data insert data base

==========> function in laravel ==> execute action 
/**
function ===> reurn view ==> insert data inputs
function ==> select all input ===> save in data base

====> store data ==> database ===> model ===> $fillabe=[]


========================= update 
====> form ==> all previus data    ==> route ==> function 
====> updated  data ==> store in data base   ==> route update specific user(id) 




============================= resource
 php artisan make:controller TrackController --model=Track --resource
===> controller  
https://laravel.com/docs/12.x/controllers
===> route




============================================
1- migration ===> https://laravel.com/docs/11.x/migrations
migrations =======> (يهاجر) ====> DB ==> model (relation)  ===> Db inatilized ===> 
initialization of DB ===> migration     ====> DB (PHP MYadmin)   <==  migrations   ==>    model 

==> Php   ===> export DB ==>(schema )  ==>    logic ==> run project ==> create (migration)
migration ===> create table in Db + create columns

/**
create migration ===> php artisan make:migration create_tracks_table

add column to student after create migration
php artisan make:migration add_phone_to_students_table --table=students

rollback ==> back patch 
model ==> Controller


factory  ==(مصنع)  ==. php artisan make:factory StudentFactory --model=student
https://laravel.com/docs/11.x/eloquent-factories#main-content
seeder   ==(تغذيه)  ==. php artisan make:seeder StudentSeeder --model=Student

Run Seeder ==> php artisan db:seed --class=StudentSeeder

=========================================================>
command to create all (model , controller , seeder , factory , migration )==>php artisan make:model Subject -s -r -m -c -f
command to create all (model , controller , seeder , factory , migration )==>php artisan make:model Subject --all or -a


====================================>
Search ==> component ==> how to use it
===> subject ==> name , grade , image

=========================================
https://laravel.com/docs/11.x/blade#components
component =======> reapeat in code===> file==> call

make component ==> php artisan make:component Button

component ===> file ==> app ==> view ==> component ==> component class(add variables)
       <x-componentName  variableName="value"></x-componentName>
    <x-button class="warning" name="All Tracks"></x-button>

if their no variables ===>  <x-componentName ></x-componentName>
component style ==> resources ==> view ==> component ==> style(html)



pagination ==> count ==> data ==> next previous
validation and error handling  ===========> 
model ==> controller
================================================================?>

realtion =====> one to one ==>  new table (two not mandatory) ===> id of two tables  , =====> id ==> table (not mandatory)
realtion =====> one to many  ====> id of one ===> put in table of many
realtion =====> many to many  ==> new table ===> id of two tables 

==================================>
students , Track , course 
https://laravel.com/docs/11.x/migrations#foreign-key-constraints  ===> foreign key
https://laravel.com/docs/11.x/eloquent-relationships==============> realtion between tables
=============================>
students , tracks (one to many ) ===> student can assign in one track , and track has many students
====> migration  ==> structure (column of table)  ==> id (track)===> table (student)
===> model   ===> realation  ===> (track,students)

=====================> view ===> student ===> track Name    ===========>   resource -> views -> student
=====================> view ===> track ===> students Name    ======>  resource -> views -> track


=======================================> create student choose track name


====> pivot table  ===> interviews questions
students , courses (many to many ) ===> student can take many courses , and course can assign many students

==========================
clear routes cache 
php artisan route:clear
php artisan config:clear
php artisan cache:clear

======================================
middleware , api
middle ==> authentication , authorization  ===> 
===>  authentication , authorization ==> breez
-->install node 
==> npm ==> install ==> npm install || npm install -g npm@latest

===> composer require laravel/breeze --dev
===> php artisan breeze:install                                             
==> npm run dev